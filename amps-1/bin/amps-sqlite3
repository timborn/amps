#! /usr/bin/env python
############################################################################
##
## Copyright (c) 2012-2017 60East Technologies Inc., All Rights Reserved.
##
## This computer software is owned by 60East Technologies Inc. and is
## protected by U.S. copyright laws and other laws and by international
## treaties.  This computer software is furnished by 60East Technologies
## Inc. pursuant to a written license agreement and may be used, copied,
## transmitted, and stored only in accordance with the terms of such
## license agreement and with the inclusion of the above copyright notice.
## This computer software or any other copies thereof may not be provided
## or otherwise made available to any other person.
##
## U.S. Government Restricted Rights.  This computer software: (a) was
## developed at private expense and is in all respects the proprietary
## information of 60East Technologies Inc; (b) was not developed with
## government funds; (c) is a trade secret of 60East Technologies Inc.
## for all purposes of the Freedom of Information Act; and (d) is a
## commercial item and thus, pursuant to Section 12.212 of the Federal
## Acquisition Regulations (FAR) and DFAR Supplement Section 227.7202,
## Government's use, duplication or disclosure of the computer software
## is subject to the restrictions set forth by 60East Technologies Inc.
##
############################################################################

usage = """
amps-sqlite3: Python wrapper to make working with AMPS statistics sqlite3
              databases easier.

Usage:

  Run amps-sqlite3, just as you would the sqlite3 utility for browsing
  the AMPS statistics database with a provided database file and SQL
  statement string to execute.

Example:

  To get a list of ISO-8601 timestamps, in order, and the amount of system
    CPU time was in use, use the following command:

  ./amps-sqlite3 stats.db "select iso8601(timestamp),system_percent from hcpus order by timestamp"

  
Notes:

  The AMPS statistics database is split into seperate tables for each entity:
  one "dynamic" for frequently changing metrics and another "static" for
  rarely changing metrics and properties.  These tables have the suffixes
  "_DYNAMIC" and "_STATIC", respectively.

  For convenience, amps-sqlite3 creates temporary views that are joins from
  the dynamic and static tables, so that all the statistics are in one place
  easily consumed, filtered, and reviewed. For example, instead of joining
  HCPUS_DYNAMIC to HCPUS_STATIC on the static_id, you can just query HCPUS
  directly, which is the temporary view where this has already been done for
  you.

  Additionally, there are functions defined in this utility that you can
  use to simplify your queries and make it easier to use:

    iso8601(timestamp)      : Returns an ISO-8601 datetime in UTC
                              YYYYmmddTHHMMSS format.
    iso8601_local(timestamp): Returns an ISO-8601 datetime in local time
                              YYYYmmddTHHMMSS format.
    timestamp(string)       : Returns a numeric timestamp from an ISO-8601
                              UTC datetime string in the YYYYmmddTHHMMSS
                              format.
"""  # END USAGE SCREEN

import sys, time, calendar
import sqlite3

if len(sys.argv) < 3:
    sys.stderr.write(usage)
    sys.exit(1)

def iso8601(ts):
    """
    Converts amps stats time into an ISO8601 local datetime.
    """
    pt = float(ts)/1000 - 210866803200 # subtract the unix epoch
    it = int(pt)
    ft = pt-it
    return time.strftime("%Y%m%dT%H%M%S",time.gmtime(it)) + ("%.6f" % ft)[1:]

def iso8601_local(ts):
    """
    Converts amps stats time into an ISO8601 local datetime.
    """
    pt = float(ts)/1000 - 210866803200 # subtract the unix epoch
    it = int(pt)
    ft = pt-it
    return time.strftime("%Y%m%dT%H%M%S",time.localtime(it)) + ("%.6f" % ft)[1:]

def timestamp(isots):
    """
    Converts an ISO8601 datetime into an AMPS statistics timestamp.
    """
    try:
        strp = time.strptime(isots.split('.')[0], "%Y%m%dT%H%M%S")
        return (calendar.timegm(strp) + 210866803200)*1000
    except:
        sys.stderr.write("Error on: %s" % isots)
        return None

def create_view_sql(base_table_name):
    return "create temporary view if not exists %(base_name)s as select * from %(base_name)s_dynamic d, %(base_name)s_static s where d.static_id = s.static_id" % {"base_name": base_table_name}
    
database = sqlite3.connect(sys.argv[1])
database.create_function("iso8601", 1, iso8601)
database.create_function("iso8601_local", 1, iso8601_local)
database.create_function("timestamp", 1, timestamp)

sql = database.cursor()

#Create temporary views to make lives easier
base_tables = ["HCPUS", "HDISKS", "HMEMORY", "HNET", "ICLIENTS",
               "ICONFLATEDTOPICS", "ICONSOLE_LOGGERS", "ICPUS", "IFILE_LOGGERS",
               "IGLOBALS", "IMEMORY", "IMEMORY_CACHES", "IPROCESSORS",
               "IQUEUES", "IREPLICATIONS", "ISOW", "ISTATISTICS", "ILIFETIMES",
               "ISUBSCRIPTIONS", "ISYSLOG_LOGGERS", "ITRANSPORTS", "IVIEWS"]
map(sql.execute, map(create_view_sql, base_tables))

sql.execute(sys.argv[2])
row = sql.fetchone()
record_count = 0

# Print header row
if(row):
    sys.stdout.write(','.join(map(lambda k: k[0], sql.description)))
    sys.stdout.write('\n')

while(row):
    record_count = record_count + 1
    sys.stdout.write(','.join(map(str,row)))
    sys.stdout.write('\n')
    row = sql.fetchone()

sys.stderr.write("%d Total Records\n" % record_count)

database.close()
