#! /usr/bin/env python
###############################################################################
##
## Copyright (c) 2012-2017 60East Technologies Inc., All Rights Reserved.
##
## This computer software is owned by 60East Technologies Inc. and is
## protected by U.S. copyright laws and other laws and by international
## treaties.  This computer software is furnished by 60East Technologies
## Inc. pursuant to a written license agreement and may be used, copied,
## transmitted, and stored only in accordance with the terms of such
## license agreement and with the inclusion of the above copyright notice.
## This computer software or any other copies thereof may not be provided
## or otherwise made available to any other person.
##
## U.S. Government Restricted Rights.  This computer software: (a) was
## developed at private expense and is in all respects the proprietary
## information of 60East Technologies Inc.; (b) was not developed with
## government funds; (c) is a trade secret of 60East Technologies Inc.
## for all purposes of the Freedom of Information Act; and (d) is a
## commercial item and thus, pursuant to Section 12.212 of the Federal
## Acquisition Regulations (FAR) and DFAR Supplement Section 227.7202,
## Government's use, duplication or disclosure of the computer software
## is subject to the restrictions set forth by 60East Technologies Inc..
##
###############################################################################
import sys
import os

# Before doing anything, check that we're running at least version 2.5
if ''.join(map(str, sys.version_info[0:3])) < '250':
    sys.stderr.write('Error: %s requires Python 2.5 or greater.\n' % sys.argv[0])
    sys.exit(1)

# Insert the lib directory into PYTHONPATH
sys.path.append(os.path.join(os.path.dirname(sys.argv[0]), "lib"))

import amps_sow


def get_params():
    params = {}
    from optparse import OptionParser
    usage = "%prog [options] <files>"
    version = "%prog 2.0"
    description = "This tool dumps an AMPS SOW file to standard output."
    parser = OptionParser(usage=usage, version=version, description=description)
    parser.add_option("-n", "--limit", dest="limit", type="int", default=sys.maxint,
                      help="maximum number of records to print per file")
    parser.add_option("-v", "--verbose", action='store_true', dest='verbose',
                      help="print record metadata for records and file summary")
    parser.add_option("-e", "--escape", action='store_true', dest='escape', default=False,
                      help="escape special characters in record data and header")
    parser.add_option("-d", "--data-only", dest="delimiter", default=10, type="int",
                      help="prints only the record data using the provided ASCII " +
                      "character value as the record delimiter [default: 10 for newline]")
    parser.add_option("-f", "--fast", action='store_true', dest="fast",
                      help="speed up dump by skipping crc validation")
    parser.add_option("--sizing-chart", action='store_true', dest='sizing_chart',
                      help="print sizing chart for efficiency comparison (experimental)")
    parser.add_option("--localtime", action='store_true', dest='is_localtime',
                      help="display iso 8601 timestamp in localtime format")
    parser.add_option("--include-expired", action='store_true', dest='include_expired',
                      help="emit records with past expiration timestamps")
    (options, args) = parser.parse_args()

    # Make sure we have everything we need
    if not len(args) > 0:
        parser.print_help()
        sys.stderr.write("\nError: Must provide an AMPS SOW persistence file.\n")
        sys.exit(1)

    params['filenames'] = args
    params['limit'] = options.limit
    params['delimiter'] = chr(options.delimiter)
    params['escape'] = options.escape
    params['verbose'] = options.verbose
    params['sizing_chart'] = options.sizing_chart
    params['is_localtime'] = options.is_localtime
    params['include_expired'] = options.include_expired
    params['fast'] = options.fast
    return params


def main():
    params = get_params()
    for file in params['filenames']:
        reader = amps_sow.open_reader(file, validate=(not params['fast']))
        count = 0
        for record in reader.records():
            count += 1
            if count > params['limit']:
                break
            s = record.as_string(verbose=params['verbose'],
                                 is_localtime=params['is_localtime'],
                                 include_expired=params["include_expired"])
            # ,
            #                      include_expired=params['include_expired'])
            # s includes crlf
            if s is None:
                continue
            sys.stdout.write(s)
            sys.stdout.write(params['delimiter'])
        if params['verbose']:
            sys.stdout.write(reader.metadata.as_string())


if(__name__ == "__main__"):
    main()
